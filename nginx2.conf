user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    upstream service1 { # Define an upstream group named 'service1' for load balancing
        server service1a weight=2; # Specifie a server named 'service1a' with a weight of 2 for load balancing
        server service1b; # Specifie another server named 'service1b' with a default weight of 1
    }

    server { # Redirect http to https
        listen 80;
        listen [::]:80;
        server_name tenmien.site www.tenmien.site;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl; # Listen on port 443 using SSL/TLS
        listen [::]:443 ssl; 

        server_name tenmien.site www.tenmien.site; # Restrict access to this hostname

        ssl_certificate /etc/nginx/ssl/live/tenmien.site/fullchain.pem;   # SSL certificate file path
        ssl_certificate_key /etc/nginx/ssl/live/tenmien.site/privkey.pem;  # SSL certificate key file path
            
        location /path1 {
            rewrite ^/path1(.*) /$1 break; # remove `path1` part
            proxy_pass http://service1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /path2 {
            rewrite ^/path2(.*) /$1 break; # remove `path2` part
            proxy_pass http://service2;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 80 default_server;  # Mark this server block as the default for IPv4
        listen [::]:80 default_server;  # Mark this server block as the default for IPv6
        server_name _;  # The underscore is a wildcard that matches any hostname

        return 403;  # Return a 403 Forbidden status for all other requests
    }
}
